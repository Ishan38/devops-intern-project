pipeline {
    agent any

    environment {
        APP_NAME = 'hello-world-app' 
        AWS_REGION = 'eu-north-1'    
        ECR_REGISTRY = '857235179891.dkr.ecr.eu-north-1.amazonaws.com'
        ECR_REPO = "${ECR_REGISTRY}/hello-world-app"
        AWS_CREDENTIALS_ID = 'aws-creden' 
    }

    stages {

        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/maaaaanas/devops-intern-project.git', branch: 'main'
            }
        }

        stage('Docker Build') {
            steps {
                bat "docker build -t %APP_NAME%:latest ."
            }
        }

        stage('Docker Run Test') {
            steps {
                bat """
                    echo Running Docker container for testing...
                    docker run -d -p 5000:5000 --name test-%APP_NAME% %APP_NAME%:latest
                    
                    timeout /t 5
                    
                    echo Fetching container logs...
                    docker logs test-%APP_NAME%
                """
            }
        }

        stage('Trivy Security Scan') {
            steps {
                bat """
                    echo Running Trivy security scan on %APP_NAME%...
                    trivy image --format table --output trivy-report.txt %APP_NAME%:latest || exit /b 0
                """
                archiveArtifacts artifacts: 'trivy-report.txt', onlyIfSuccessful: false
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "${AWS_CREDENTIALS_ID}"
                ]]) {
                    bat """
                        echo Logging in to ECR...
                        aws ecr get-login-password --region %AWS_REGION% | docker login --username AWS --password-stdin %ECR_REGISTRY%
                        
                        echo Tagging image...
                        docker tag %APP_NAME%:latest %ECR_REPO%:latest
                        
                        echo Pushing to ECR...
                        docker push %ECR_REPO%:latest
                    """
                }
            }
        }

        stage('Provision Infrastructure (Terraform)') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: "${AWS_CREDENTIALS_ID}"
                ]]) {
                    bat """
                        cd terraform
                        terraform init
                        terraform apply -auto-approve
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker container...'
            bat "docker stop test-%APP_NAME% || exit /b 0"
            bat "docker rm test-%APP_NAME% || exit /b 0"
        }

        success {
            echo ' Pipeline completed successfully.'
        }

        failure {
            echo ' Pipeline failed.'
        }
    }
}
