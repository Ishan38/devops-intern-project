pipeline {
    agent any

    environment {
        APP_NAME = 'hello-world-app'
        AWS_REGION = 'eu-north-1'
        ECR_REGISTRY = '857235179891.dkr.ecr.eu-north-1.amazonaws.com'
        ECR_REPO = '857235179891.dkr.ecr.eu-north-1.amazonaws.com/hello-world-app'
        AWS_CREDENTIALS_ID = 'aws-creden'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/maaaaanas/devops-intern-project.git', branch: 'main'
            }
        }

        stage('Docker Build') {
            steps {
                bat 'docker build -t hello-world-app:latest .'
            }
        }

        stage('Docker Run Test') {
            steps {
                bat '''
                    docker run -d -p 5000:5000 --name test-hello-world-app hello-world-app:latest
                    timeout /t 5 /nobreak
                    docker logs test-hello-world-app
                '''
            }
        }

        stage('Trivy Security Scan') {
            steps {
                bat '''
                    trivy image --format table --output trivy-report.txt hello-world-app:latest || exit 0
                '''
                archiveArtifacts artifacts: 'trivy-report.txt', onlyIfSuccessful: false
            }
        }

        stage('Push to ECR') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creden'
                ]]) {
                    bat '''
                        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 857235179891.dkr.ecr.eu-north-1.amazonaws.com
                        docker tag hello-world-app:latest 857235179891.dkr.ecr.eu-north-1.amazonaws.com/hello-world-app:latest
                        docker push 857235179891.dkr.ecr.eu-north-1.amazonaws.com/hello-world-app:latest
                    '''
                }
            }
        }

        stage('Provision Infrastructure (Terraform)') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creden'
                ]]) {
                    bat '''
                        cd terraform
                        terraform init
                        terraform apply -auto-approve
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up test container...'
            bat 'docker stop test-hello-world-app || exit 0'
            bat 'docker rm test-hello-world-app || exit 0'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
