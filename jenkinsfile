pipeline {
    agent any

    environment {
        APP_NAME = 'hello-world-app'
        AWS_REGION = 'eu-north-1'
        ECR_REGISTRY = '857235179891.dkr.ecr.eu-north-1.amazonaws.com'
        ECR_REPO = "${ECR_REGISTRY}/${APP_NAME}"
        AWS_CREDENTIALS_ID = 'aws-creden'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/maaaaanas/devops-intern-project.git', branch: 'main'
            }
        }

        stage('Docker Build') {
            steps {
                bat "docker build -t ${APP_NAME}:latest ."
            }
        }

        stage('Docker Run Test') {
            steps {
                bat """
                    docker run -d -p 5000:5000 --name test-${APP_NAME} ${APP_NAME}:latest
                    timeout /t 5 /nobreak
                    docker logs test-${APP_NAME}
                """
            }
        }

        stage('Trivy Security Scan') {
            steps {
                bat """
                    trivy image --format table --output trivy-report.txt ${APP_NAME}:latest || exit 0
                """
                archiveArtifacts artifacts: 'trivy-report.txt', onlyIfSuccessful: false
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}"]]) {
                        bat """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            docker tag ${APP_NAME}:latest ${ECR_REPO}:latest
                            docker push ${ECR_REPO}:latest
                        """
                    }
                }
            }
        }

        stage('Provision Infrastructure (Terraform)') {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}"]]) {
                        bat """
                            cd terraform
                            terraform init
                            terraform apply -auto-approve
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up test container...'
            bat "docker stop test-${APP_NAME} || exit 0"
            bat "docker rm test-${APP_NAME} || exit 0"
        }
        success {
            echo ' Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
          
